using System.Text;
using NAI.Projekt.KNN_ConsoleApp_s24759.Algorithms;

namespace NAI.Projekt.KNN_ConsoleApp_s24759.Structures;

public enum VectorPointsAutoGeneratedNames
{
    x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w
}

public class KnnVector<T>
{
    public List<T> InnerPoints { get; private set; }
    public Type UnderlyingType { get; private set; } = typeof(T);
    
    public string DecisiveAttributeName { get; private set; }
    public int NumberOfPoints => InnerPoints.Count;
    
    public bool IsTrainingVector { get; private set; }


    public KnnVector(bool isTrainingVector)
    {
        InnerPoints = new List<T>();
        IsTrainingVector = isTrainingVector;
    }
    
    public KnnVector(string decisiveAttributeName, bool isTrainingVector = false)
    {
        InnerPoints = new List<T>();
        DecisiveAttributeName = decisiveAttributeName;
        IsTrainingVector = isTrainingVector;
    }

    public KnnVector(IEnumerable<T> innerPointsEnumerable, string decisiveAttributeName, bool isTrainingVector = false)
    {
        InnerPoints = innerPointsEnumerable.ToList();
        DecisiveAttributeName = decisiveAttributeName;
        IsTrainingVector = isTrainingVector;
    }

    public KnnVector(IEnumerable<T> innerPointsEnumerable, bool isTrainingVector = false)
    {
        InnerPoints = innerPointsEnumerable.ToList();
        IsTrainingVector = isTrainingVector;
    }
    

    public void Add(T value)
    {
        InnerPoints.Add(value);
    }
    
    public void Remove(T value)
    {
        InnerPoints.Remove(value);
    }
    
    public void AddRange(IEnumerable<T> values)
    {
        InnerPoints.AddRange(values);
    }

    public T this[int index]
    {
        get => InnerPoints[index];
        set => InnerPoints[index] = value;
    }

    public override string ToString()
    {
        var exitStringSb = new StringBuilder();
        exitStringSb.Append('(');
        for (var i = 0; i < InnerPoints.Count; i++)
        {
            // Jeśli jest więcej niż 25 punktów, to nie generujemy nazw dla nich
            if (i > 25)
                exitStringSb.Append($"{i}: {InnerPoints[i]}");
            else
                exitStringSb.Append($"[{KNN.ColumnStylesNames[i]}]{(VectorPointsAutoGeneratedNames)i}[/]: {InnerPoints[i]}");
            
            if (i < InnerPoints.Count - 1)
                exitStringSb.Append(", ");
        }
        exitStringSb.Append(')');
        
        if (DecisiveAttributeName is not null)
            exitStringSb.Append($" -> {DecisiveAttributeName}");
        
        return exitStringSb.ToString();
    }
}